/**
 * @fileoverview Shared test utilities and constants for taglib-wasm tests
 */

// Use numeric values directly to avoid import issues
export enum PictureType {
  Other = 0,
  FileIcon = 1,
  OtherFileIcon = 2,
  FrontCover = 3,
  BackCover = 4,
  LeafletPage = 5,
  Media = 6,
  LeadArtist = 7,
  Artist = 8,
  Conductor = 9,
  Band = 10,
  Composer = 11,
  Lyricist = 12,
  RecordingLocation = 13,
  DuringRecording = 14,
  DuringPerformance = 15,
  MovieScreenCapture = 16,
  ColouredFish = 17,
  Illustration = 18,
  BandLogo = 19,
  PublisherLogo = 20,
}

// Test file paths
export const TEST_FILES = {
  wav: "./tests/test-files/wav/kiss-snippet.wav",
  mp3: "./tests/test-files/mp3/kiss-snippet.mp3",
  flac: "./tests/test-files/flac/kiss-snippet.flac",
  ogg: "./tests/test-files/ogg/kiss-snippet.ogg",
  m4a: "./tests/test-files/mp4/kiss-snippet.m4a",
} as const;

// Expected format names
export const EXPECTED_FORMATS = {
  wav: "WAV",
  mp3: "MP3",
  flac: "FLAC",
  ogg: "OGG",
  m4a: "MP4",
} as const;

// Test image data - 1x1 red PNG (67 bytes)
export const RED_PNG = new Uint8Array([
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
  0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xde, 0x00, 0x00, 0x00,
  0x0c, 0x49, 0x44, 0x41, 0x54, 0x08, 0xd7, 0x63, 0xf8, 0xcf, 0xc0, 0x00,
  0x00, 0x03, 0x01, 0x01, 0x00, 0xe3, 0x26, 0xde, 0xfc, 0x00, 0x00, 0x00,
  0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
]);

// Test image data - 1x1 blue JPEG
export const BLUE_JPEG = new Uint8Array([
  0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
  0x01, 0x00, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
  0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
  0x09, 0x08, 0x0a, 0x0c, 0x14, 0x0d, 0x0c, 0x0b, 0x0b, 0x0c, 0x19, 0x12,
  0x13, 0x0f, 0x14, 0x1d, 0x1a, 0x1f, 0x1e, 0x1d, 0x1a, 0x1c, 0x1c, 0x20,
  0x24, 0x2e, 0x27, 0x20, 0x22, 0x2c, 0x23, 0x1c, 0x1c, 0x28, 0x37, 0x29,
  0x2c, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1f, 0x27, 0x39, 0x3d, 0x38, 0x32,
  0x3c, 0x2e, 0x33, 0x34, 0x32, 0xff, 0xc0, 0x00, 0x0b, 0x08, 0x00, 0x01,
  0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0xff, 0xc4, 0x00, 0x1f, 0x00, 0x00,
  0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
  0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0x35, 0x10, 0x00, 0x02, 0x01, 0x03,
  0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7d,
  0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06,
  0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
  0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72,
  0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
  0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45,
  0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
  0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75,
  0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
  0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
  0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
  0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9,
  0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
  0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4,
  0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xda, 0x00, 0x08, 0x01, 0x01,
  0x00, 0x00, 0x3f, 0x00, 0xfb, 0xd0, 0x00, 0x00, 0x28, 0xa2, 0x8a, 0x00,
  0xff, 0xd9
]);

// Helper to create test images in temp directory
export async function createTestImages(): Promise<{ red: string; blue: string; tempDir: string }> {
  const tempDir = await Deno.makeTempDir();
  const redPath = `${tempDir}/red.png`;
  const bluePath = `${tempDir}/blue.jpg`;
  
  await Deno.writeFile(redPath, RED_PNG);
  await Deno.writeFile(bluePath, BLUE_JPEG);
  
  return { red: redPath, blue: bluePath, tempDir };
}

// Helper to cleanup temp directory
export async function cleanupTestImages(tempDir: string) {
  try {
    await Deno.remove(tempDir, { recursive: true });
  } catch {
    // Ignore cleanup errors
  }
}

// Common test picture data
export const TEST_PICTURES = {
  frontCover: {
    mimeType: "image/png",
    data: RED_PNG,
    type: PictureType.FrontCover,
    description: "Front cover"
  },
  backCover: {
    mimeType: "image/jpeg",
    data: BLUE_JPEG,
    type: PictureType.BackCover,
    description: "Back cover"
  }
} as const;

// Extended metadata test values
export const TEST_EXTENDED_METADATA = {
  acoustidFingerprint: "AQADtJG4JlSYJEkURZEE",
  acoustidId: "7d6e2181-3333-4444-5555-666677778888",
  musicbrainzTrackId: "123e4567-e89b-12d3-a456-426614174000",
  musicbrainzReleaseId: "550e8400-e29b-41d4-a716-446655440000",
  musicbrainzArtistId: "b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d",
  replayGainTrackGain: "-6.54 dB",
  replayGainTrackPeak: "0.988769",
  replayGainAlbumGain: "-7.89 dB",
  replayGainAlbumPeak: "0.999969",
  appleSoundCheck: " 00000571 00000571 00002C88 00002C88 00007F9C 00007F9C 00007FFF 00007FFF 00007F9C 00007F9C"
} as const;

// Helper to create a test file with metadata
export async function createTestFileWithMetadata(
  format: keyof typeof TEST_FILES,
  tags: Record<string, any>
): Promise<Uint8Array> {
  const { readFileData } = await import("../src/utils/file.ts");
  const { applyTags } = await import("../src/simple.ts");
  
  const buffer = await readFileData(TEST_FILES[format]);
  return await applyTags(buffer, tags);
}

// Helper to measure operation time
export async function measureTime<T>(
  operation: () => Promise<T>
): Promise<{ result: T; timeMs: number }> {
  const start = performance.now();
  const result = await operation();
  const timeMs = performance.now() - start;
  return { result, timeMs };
}

// Helper to create multiple test files
export async function createTestFiles(
  count: number,
  baseFormat: keyof typeof TEST_FILES = "mp3"
): Promise<Uint8Array[]> {
  const { readFileData } = await import("../src/utils/file.ts");
  const baseBuffer = await readFileData(TEST_FILES[baseFormat]);
  
  return Array(count).fill(null).map(() => new Uint8Array(baseBuffer));
}

// Helper for temporary file operations
export async function withTempFile<T>(
  filename: string,
  data: Uint8Array,
  fn: (path: string) => Promise<T>
): Promise<T> {
  const tempDir = await Deno.makeTempDir();
  const filepath = `${tempDir}/${filename}`;
  
  try {
    await Deno.writeFile(filepath, data);
    return await fn(filepath);
  } finally {
    try {
      await Deno.remove(tempDir, { recursive: true });
    } catch {
      // Ignore cleanup errors
    }
  }
}

// Common test tags
export const TEST_TAGS = {
  basic: {
    title: "Test Title",
    artist: "Test Artist",
    album: "Test Album",
    year: 2024,
    genre: "Test",
    track: 1,
    comment: "Test comment"
  },
  unicode: {
    title: "Êó•Êú¨Ë™û„Çø„Ç§„Éà„É´",
    artist: "–ê—Ä—Ç–∏—Å—Ç",
    album: "‰∏ìËæë",
    comment: "üéµüé∏üé§"
  },
  empty: {
    title: "",
    artist: "",
    album: "",
    year: 0,
    genre: "",
    track: 0,
    comment: ""
  }
} as const;