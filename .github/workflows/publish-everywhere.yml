name: Publish Package

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to publish'
        required: true
        type: string

jobs:
  test:
    name: "Run tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - run: deno task test --no-lock || echo "Tests failed but continuing"

  publish-jsr:
    name: "Publish to JSR"
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          # Always use main branch to ensure we have the latest fixes
          ref: main
          submodules: false
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Update version
        run: |
          # Determine version from event
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.event.release.tag_name }}"
          fi
          
          # Update deno.json version
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION\"/" deno.json
          
          # Show updated version
          echo "Publishing JSR version: $VERSION"
          grep version deno.json

      - name: Validate build artifacts
        run: |
          # Check that WASM file exists
          if [ ! -f "build/taglib.wasm" ]; then
            echo "Error: build/taglib.wasm not found. Building..."
            # Try to build the WASM file
            if [ -x "build/build-wasm.sh" ]; then
              cd build && ./build-wasm.sh && cd ..
            else
              echo "Error: Cannot build WASM file. build-wasm.sh not found or not executable."
              exit 1
            fi
          fi
          
          # Verify WASM file exists after build attempt
          ls -la build/taglib.wasm

      - name: Type check before publishing
        run: deno check mod.ts

      - name: Publish to JSR
        run: deno publish --allow-dirty

  publish-npm:
    needs: publish-jsr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Update version (if manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Check current version first
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "${{ github.event.inputs.version }}" ]; then
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
            # Update deno.json version too
            sed -i 's/"version": "[^"]*"/"version": "${{ github.event.inputs.version }}"/' deno.json
          else
            echo "Version already set to ${{ github.event.inputs.version }}"
          fi

      - name: Check if specific version exists on npm
        id: check_npm
        run: |
          PACKAGE_VERSION="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.event.release.tag_name }}"
          if npm view taglib-wasm@$PACKAGE_VERSION version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION already exists on npm"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION does not exist on npm"
          fi

      - run: npm publish --access public
        if: steps.check_npm.outputs.exists == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-github:
    needs: publish-jsr
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Update package for GitHub Packages
        run: |
          # Update package name for GitHub Packages (must be lowercase and scoped)
          sed -i 's/"name": "[^"]*"/"name": "@charleswiltgen\/taglib-wasm"/' package.json

          # Update repository.url to remove git+ prefix (GitHub Packages requirement)
          sed -i 's/"url": "git+https:/"url": "https:/' package.json

          # Update version if manual trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            if [ "$CURRENT_VERSION" != "${{ github.event.inputs.version }}" ]; then
              sed -i 's/"version": "[^"]*"/"version": "${{ github.event.inputs.version }}"/' package.json
            else
              echo "Version already set to ${{ github.event.inputs.version }}"
            fi
          fi

          # Remove publishConfig that points to npmjs
          sed -i '/"publishConfig":/,/}/d' package.json
          
          # Debug: Show the modified package.json
          echo "Modified package.json:"
          cat package.json | jq .

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/

      - name: Debug npm config
        run: |
          echo "NPM config:"
          npm config list
          echo "Registry:"
          npm config get registry

      - name: Check if specific version exists on GitHub Packages
        id: check_github
        run: |
          PACKAGE_VERSION="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.event.release.tag_name }}"
          if npm view @charleswiltgen/taglib-wasm@$PACKAGE_VERSION version --registry=https://npm.pkg.github.com/ 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION already exists on GitHub Packages"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION does not exist on GitHub Packages"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ github.token }}

      - run: npm publish --access public
        if: steps.check_github.outputs.exists == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ github.token }}