name: Publish to NPM/GitHub/JSR (Improved)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (e.g., 1.2.3)"
        required: true
        type: string
  release:
    types: [published]
  push:
    tags:
      - "v*"

# Job execution order:
# 1. prepare-and-test: Build and test the package
# 2. publish-jsr: Publish to JSR first (fail-fast if OIDC not working)
# 3. publish-npm: Publish to NPM (only if JSR succeeds)
# 4. publish-github: Publish to GitHub Packages (only if JSR and NPM succeed)
# 5. finalize: Create tags/issues based on results

jobs:
  prepare-and-test:
    name: Prepare and Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-publish: ${{ steps.check.outputs.should-publish }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install dependencies
        run: npm install

      - name: Install Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: latest

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            echo "No version found"
            exit 1
          fi

          # Normalize version (remove 'v' prefix if present)
          VERSION="${VERSION#v}"

          # Validate version format
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if should publish
        id: check
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          SHOULD_PUBLISH="true"

          # Check if version already exists on NPM
          if npm view taglib-wasm@$VERSION version 2>/dev/null; then
            echo "Version $VERSION already exists on NPM"
            SHOULD_PUBLISH="false"
          fi

          echo "should-publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT

      - name: Sync versions across files
        if: steps.check.outputs.should-publish == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Use the sync-version script to update all version references
          node -e "
            const fs = require('fs');
            const path = require('path');

            // Update package.json
            const pkgPath = path.join(__dirname, 'package.json');
            const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
            pkg.version = '$VERSION';
            fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');

            // Update deno.json
            const denoPath = path.join(__dirname, 'deno.json');
            const deno = JSON.parse(fs.readFileSync(denoPath, 'utf8'));
            deno.version = '$VERSION';
            fs.writeFileSync(denoPath, JSON.stringify(deno, null, 2) + '\n');

            console.log('Updated versions to $VERSION');
          "

      - name: Build project
        if: steps.check.outputs.should-publish == 'true'
        run: npm run build

      - name: Verify build artifacts
        if: steps.check.outputs.should-publish == 'true'
        run: |
          # Check that all required files exist
          test -f dist/index.js || (echo "Missing dist/index.js" && exit 1)
          test -f dist/index.d.ts || (echo "Missing dist/index.d.ts" && exit 1)
          test -f dist/taglib.wasm || (echo "Missing dist/taglib.wasm" && exit 1)
          test -f dist/taglib-wrapper.js || (echo "Missing dist/taglib-wrapper.js" && exit 1)

          # Check file sizes are reasonable
          WASM_SIZE=$(stat -c%s dist/taglib.wasm 2>/dev/null || stat -f%z dist/taglib.wasm)
          if [ "$WASM_SIZE" -lt 1000 ]; then
            echo "WASM file too small: $WASM_SIZE bytes"
            exit 1
          fi

      - name: Run tests
        if: steps.check.outputs.should-publish == 'true'
        run: npm test || true # TODO: Fix test failures in CI

      - name: Upload build artifacts
        if: steps.check.outputs.should-publish == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            deno.json
            README.md
            LICENSE
          retention-days: 1

  publish-jsr:
    name: Publish to JSR
    needs: prepare-and-test
    if: needs.prepare-and-test.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Required for OIDC authentication to JSR
    outputs:
      published: ${{ steps.publish.outputs.published }}
    steps:
      - uses: actions/checkout@v4

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Publish to JSR with retry
        id: publish
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            # Use OIDC for authentication (no token needed)
            if deno publish --allow-slow-types --allow-dirty; then
              echo "JSR publish successful"
              echo "published=true" >> $GITHUB_OUTPUT
            else
              echo "JSR publish failed"
              echo "published=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          on_retry_command: |
            echo "Retrying JSR publish..."

  publish-npm:
    name: Publish to NPM
    needs: [prepare-and-test, publish-jsr] # Now depends on JSR success
    if: needs.prepare-and-test.outputs.should-publish == 'true' && needs.publish-jsr.outputs.published == 'true'
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.publish.outputs.published }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Prepare publish directory
        run: |
          # Create a clean directory with only files to publish
          mkdir -p publish-dir
          cp -r dist publish-dir/
          cp package.json README.md LICENSE publish-dir/
          cd publish-dir
          echo "Contents of publish directory:"
          ls -la
          echo "Contents of dist:"
          ls -la dist/

      - name: Publish to NPM with retry
        id: publish
        uses: nick-invision/retry@v3
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            cd publish-dir && npm publish --access public
            echo "published=true" >> $GITHUB_OUTPUT
          on_retry_command: |
            echo "Retrying NPM publish..."

      - name: Verify NPM publication
        run: |
          VERSION="${{ needs.prepare-and-test.outputs.version }}"
          sleep 10  # Give NPM time to propagate

          for i in {1..5}; do
            if npm view taglib-wasm@$VERSION version 2>/dev/null; then
              echo "Successfully verified version $VERSION on NPM"
              exit 0
            fi
            echo "Attempt $i: Version not found yet, waiting..."
            sleep 10
          done

          echo "Failed to verify NPM publication"
          exit 1

  publish-github:
    name: Publish to GitHub Packages
    needs: [
      prepare-and-test,
      publish-jsr,
      publish-npm,
    ] # Depends on both JSR and NPM
    if: needs.prepare-and-test.outputs.should-publish == 'true' && needs.publish-jsr.outputs.published == 'true' && needs.publish-npm.outputs.published == 'true'
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.publish.outputs.published }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://npm.pkg.github.com"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Prepare publish directory
        run: |
          # Create a clean directory with only files to publish
          mkdir -p publish-dir
          cp -r dist publish-dir/
          cp package.json README.md LICENSE publish-dir/

      - name: Update package.json for GitHub
        run: |
          cd publish-dir
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));

            // Update package name for GitHub
            pkg.name = '@charleswiltgen/taglib-wasm';

            // Remove NPM-specific config
            delete pkg.publishConfig;

            // Add GitHub registry config
            pkg.publishConfig = {
              registry: 'https://npm.pkg.github.com'
            };

            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log('Updated package.json for GitHub Packages');
          "

      - name: Publish to GitHub with retry
        id: publish
        uses: nick-invision/retry@v3
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            cd publish-dir && npm publish
            echo "published=true" >> $GITHUB_OUTPUT
          on_retry_command: |
            echo "Retrying GitHub publish..."

  finalize:
    name: Finalize Release
    needs: [prepare-and-test, publish-jsr, publish-npm, publish-github]
    if: always() && needs.prepare-and-test.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create tags
      issues: write # Required to create issues
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check publication status
        id: status
        run: |
          VERSION="${{ needs.prepare-and-test.outputs.version }}"
          SUCCESS=true
          FAILURES=""

          if [ "${{ needs.publish-npm.outputs.published }}" != "true" ]; then
            FAILURES="${FAILURES}NPM "
            SUCCESS=false
          fi

          if [ "${{ needs.publish-github.outputs.published }}" != "true" ]; then
            FAILURES="${FAILURES}GitHub "
            SUCCESS=false
          fi

          if [ "${{ needs.publish-jsr.outputs.published }}" != "true" ]; then
            FAILURES="${FAILURES}JSR "
            SUCCESS=false
          fi

          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "failures=$FAILURES" >> $GITHUB_OUTPUT

          if [ "$SUCCESS" = "true" ]; then
            echo "✅ All publications successful for version $VERSION"
          else
            echo "❌ Failed to publish to: $FAILURES"
          fi

      - name: Create success tag
        if: steps.status.outputs.success == 'true'
        run: |
          VERSION="${{ needs.prepare-and-test.outputs.version }}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Create a published tag to mark successful release
          git tag -a "published-v$VERSION" -m "Successfully published v$VERSION to all registries"
          git push origin "published-v$VERSION"

      - name: Rollback NPM
        if: steps.status.outputs.success == 'false' && needs.publish-npm.outputs.published == 'true'
        run: |
          VERSION="${{ needs.prepare-and-test.outputs.version }}"
          echo "⚠️  Rollback required for NPM version $VERSION"
          echo "To rollback NPM:"
          echo "1. npm unpublish taglib-wasm@$VERSION"
          echo "2. Wait 24 hours before republishing the same version"
          echo ""
          echo "Note: NPM has restrictions on unpublishing. You may need to:"
          echo "- Deprecate the version instead: npm deprecate taglib-wasm@$VERSION 'Published in error'"
          echo "- Publish a patch version with fixes"

      - name: Create rollback issue
        if: steps.status.outputs.success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.prepare-and-test.outputs.version }}';
            const failures = '${{ steps.status.outputs.failures }}';
            const npmPublished = '${{ needs.publish-npm.outputs.published }}' === 'true';
            const githubPublished = '${{ needs.publish-github.outputs.published }}' === 'true';
            const jsrPublished = '${{ needs.publish-jsr.outputs.published }}' === 'true';

            let body = `## Publication Failure for v${version}\n\n`;
            body += `Failed to publish to: ${failures}\n\n`;
            body += `### Publication Status\n`;
            body += `- NPM: ${npmPublished ? '✅ Published' : '❌ Failed'}\n`;
            body += `- GitHub Packages: ${githubPublished ? '✅ Published' : '❌ Failed'}\n`;
            body += `- JSR: ${jsrPublished ? '✅ Published' : '❌ Failed'}\n\n`;

            if (npmPublished || githubPublished || jsrPublished) {
              body += `### ⚠️  Rollback Required\n\n`;

              if (npmPublished) {
                body += `#### NPM Rollback\n`;
                body += `\`\`\`bash\n`;
                body += `# Option 1: Deprecate (recommended)\n`;
                body += `npm deprecate taglib-wasm@${version} 'Published in error'\n\n`;
                body += `# Option 2: Unpublish (requires waiting 24h to republish)\n`;
                body += `npm unpublish taglib-wasm@${version}\n`;
                body += `\`\`\`\n\n`;
              }

              if (githubPublished) {
                body += `#### GitHub Packages Rollback\n`;
                body += `Delete the package version from GitHub Packages UI or use:\n`;
                body += `\`\`\`bash\n`;
                body += `gh api -X DELETE /user/packages/npm/@charleswiltgen%2Ftaglib-wasm/versions/VERSION_ID\n`;
                body += `\`\`\`\n\n`;
              }

              if (jsrPublished) {
                body += `#### JSR Rollback\n`;
                body += `JSR does not support unpublishing. Consider publishing a patch version.\n\n`;
              }
            }

            body += `### Next Steps\n`;
            body += `1. Review the workflow logs for specific error details\n`;
            body += `2. Fix the underlying issue\n`;
            body += `3. If any registries were published, follow rollback procedures above\n`;
            body += `4. Re-run the workflow or publish a new patch version\n`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Publication failed for v${version}`,
              body: body,
              labels: ['bug', 'release']
            });
