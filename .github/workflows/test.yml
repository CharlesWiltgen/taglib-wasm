name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Install Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: latest

      - name: Build WebAssembly
        run: npm run build:wasm

      - name: Build TypeScript
        run: npm run build:ts

      - name: Run postbuild
        run: npm run postbuild

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            dist/
            build/taglib.wasm
            build/taglib-wrapper.js
            build/taglib-wrapper.d.ts

  test:
    name: Test (${{ matrix.os }}, ${{ matrix.runtime }})
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] # Temporarily disable Windows tests
        runtime: [deno] # Temporarily disable Bun tests
        # runtime: [deno, bun]
        exclude:
          # Bun doesn't support Windows yet
          - os: windows-latest
            runtime: bun
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Deno
        if: matrix.runtime == 'deno'
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Bun
        if: matrix.runtime == 'bun'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: .

      - name: Run tests (Deno)
        if: matrix.runtime == 'deno'
        run: deno test --allow-read --allow-write --coverage=coverage tests/

      - name: Generate coverage report
        if: matrix.runtime == 'deno' && matrix.os == 'ubuntu-latest'
        run: deno coverage coverage --lcov --output=coverage.lcov

      - name: Upload coverage reports
        if: matrix.runtime == 'deno' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage.lcov

      - name: Run tests (Bun)
        if: matrix.runtime == 'bun'
        run: npm run test:bun

  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Check formatting
        run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Type check
        run: deno check ./src ./tests

  test-summary:
    name: Test Summary
    needs: [build, test, lint]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Tests failed!"
            exit 1
          else
            echo "✅ All tests passed!"
          fi
