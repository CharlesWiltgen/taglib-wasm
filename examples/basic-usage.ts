#!/usr/bin/env -S deno run --allow-read

/**
 * Basic taglib-wasm Usage Example
 *
 * This example demonstrates how to:
 * - Initialize taglib-wasm
 * - Load an audio file from disk
 * - Read audio properties and metadata
 * - Modify metadata tags
 * - Properly dispose of resources
 */

import { TagLib } from "../index.ts";

async function demonstrateBasicUsage() {
  console.log("üéµ taglib-wasm - Basic Usage Example");
  console.log("=".repeat(40));

  try {
    // Step 1: Initialize taglib-wasm
    console.log("üöÄ Initializing taglib-wasm...");
    const taglib = await TagLib.initialize({
      debug: false, // Set to true for debug output
      memory: {
        initial: 16 * 1024 * 1024, // 16MB
        maximum: 64 * 1024 * 1024, // 64MB
      },
    });
    console.log("‚úÖ TagLib initialized successfully\n");

    // Step 2: Load an audio file
    const audioFilePath = "./tests/test-files/mp3/kiss-snippet.mp3";
    console.log(`üìÅ Loading audio file: ${audioFilePath}`);

    const audioData = await Deno.readFile(audioFilePath);
    console.log(`üìä File size: ${audioData.length} bytes`);

    const file = taglib.openFile(audioData);

    if (!file.isValid()) {
      throw new Error("Failed to load audio file");
    }

    console.log("‚úÖ Audio file loaded successfully\n");

    // Step 3: Read format information
    const format = file.format();
    console.log(`üìÑ Detected format: ${format || "Unknown"}`);

    // Step 4: Read audio properties
    console.log("\nüéß Audio Properties:");
    const props = file.audioProperties();
    console.log(`  Duration: ${props.length} seconds`);
    console.log(`  Bitrate: ${props.bitrate} kbps`);
    console.log(`  Sample Rate: ${props.sampleRate} Hz`);
    console.log(`  Channels: ${props.channels}`);

    // Step 5: Read existing metadata
    console.log("\nüè∑Ô∏è  Current Tags:");
    const currentTags = file.tag();
    console.log(`  Title: "${currentTags.title || "(empty)"}"`);
    console.log(`  Artist: "${currentTags.artist || "(empty)"}"`);
    console.log(`  Album: "${currentTags.album || "(empty)"}"`);
    console.log(`  Year: ${currentTags.year || "(empty)"}`);
    console.log(`  Track: ${currentTags.track || "(empty)"}`);
    console.log(`  Genre: "${currentTags.genre || "(empty)"}"`);
    console.log(`  Comment: "${currentTags.comment || "(empty)"}"`);

    // Step 6: Modify metadata
    console.log("\n‚úèÔ∏è  Updating metadata...");
    file.setTitle("taglib-wasm Demo Song");
    file.setArtist("taglib-wasm");
    file.setAlbum("Demo Album");
    file.setYear(2025);
    file.setTrack(1);
    file.setGenre("Electronic");
    file.setComment("Generated by taglib-wasm example");

    // Step 7: Read updated metadata
    console.log("\nüè∑Ô∏è  Updated Tags:");
    const updatedTags = file.tag();
    console.log(`  Title: "${updatedTags.title}"`);
    console.log(`  Artist: "${updatedTags.artist}"`);
    console.log(`  Album: "${updatedTags.album}"`);
    console.log(`  Year: ${updatedTags.year}`);
    console.log(`  Track: ${updatedTags.track}`);
    console.log(`  Genre: "${updatedTags.genre}"`);
    console.log(`  Comment: "${updatedTags.comment}"`);

    // Step 8: Attempt to save (note: only affects in-memory representation)
    console.log("\nüíæ Saving changes...");
    const saveResult = file.save();
    console.log(`üíæ Save result: ${saveResult ? "Success" : "Failed"}`);
    console.log("‚ÑπÔ∏è  Note: Changes only affect in-memory representation");

    // Step 9: Clean up resources
    console.log("\nüßπ Cleaning up...");
    file.dispose();
    console.log("‚úÖ Resources disposed successfully");

    console.log("\nüéâ Example completed successfully!");
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    if (error.stack) {
      console.error("Stack trace:", error.stack);
    }
    Deno.exit(1);
  }
}

// Advanced example: Processing multiple files
async function demonstrateBatchProcessing() {
  console.log("\n" + "=".repeat(40));
  console.log("üéµ Batch Processing Example");
  console.log("=".repeat(40));

  try {
    const taglib = await TagLib.initialize();

    const testFiles = [
      "./tests/test-files/wav/kiss-snippet.wav",
      "./tests/test-files/mp3/kiss-snippet.mp3",
      "./tests/test-files/flac/kiss-snippet.flac",
      "./tests/test-files/ogg/kiss-snippet.ogg",
      "./tests/test-files/mp4/kiss-snippet.m4a",
    ];

    console.log(`üìÅ Processing ${testFiles.length} files...\n`);

    for (const filePath of testFiles) {
      try {
        const audioData = await Deno.readFile(filePath);
        const file = taglib.openFile(audioData);

        if (file.isValid()) {
          const props = file.audioProperties();
          const tags = file.tag();
          const format = file.format();

          console.log(`‚úÖ ${filePath}:`);
          console.log(`   Format: ${format || "Unknown"}`);
          console.log(`   Duration: ${props.length}s`);
          console.log(`   Bitrate: ${props.bitrate} kbps`);
          console.log(`   Title: "${tags.title || "(none)"}"`);

          file.dispose();
        } else {
          console.log(`‚ùå ${filePath}: Invalid file`);
        }
      } catch (error) {
        console.log(`‚ùå ${filePath}: ${error.message}`);
      }
      console.log();
    }

    console.log("üéâ Batch processing completed!");
  } catch (error) {
    console.error("‚ùå Batch processing error:", error.message);
  }
}

// Run the examples
if (import.meta.main) {
  await demonstrateBasicUsage();
  await demonstrateBatchProcessing();
}
